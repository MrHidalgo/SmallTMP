////
/// @group  Mixin
////

/// 
/// Mixin setting the width and height element.
///
/// @name   mixinDimensions
///
/// @param  {String}  $width             - The width property sets the width of an element.
/// @param  {String}  $height  [$width]  - The height property sets the height of an element.
///
/// @see    $object
///
/// @example
///   <selector> {
///     @include mixinDimensions(100%);
///     @include mixinDimensions(100%, 50%);
///   }
///
@mixin dimensions($width, $height:$width) {
	width: $width;
	height: $height;
}


///
/// Mixin generate animation. It uses an additional function :
/// - **map-get()**   - returns the value in a map associated with the given key. If the map doesnâ€™t have such a key, returns null;
/// - **map-merge()** - Merges two maps together into a new map. Keys in $map2 will take precedence over keys in $map1;
///
/// @link http://sass-lang.com/documentation/Sass/Script/Functions.html#map_get-instance_method       map-get()
/// @link http://sass-lang.com/documentation/Sass/Script/Functions.html#map_merge-instance_method     map-merge()
///
/// @name   mixinKeyframes
///
/// @param  {String}  $keyName - Animation Name
/// @param  {Object}  $options
///
/// @example
///   <selector> {
///     @include moduleKeyframes(clockLeft,
///       (
///         opacityStart      : 0.8,
///         opacityEnd        : 1,
///         transformStart    : rotate(360deg)
///       )
///       ||
///       (
///         opacityStart      : 0.5,
///         opacityEnd        : 1,
///         transformDouble   : (rotate(-360deg) scale(0.5))
///       )
///     );
///   }
///
@mixin keyframes($keyName, $options: ()) {
	$configuration: map-merge((), $options);

	@keyframes #{$keyName} {
		from {
			opacity: map-get($configuration, opacityStart);
			transform: map-get($configuration, transformStart);
		}
		to {
			opacity: map-get($configuration, opacityEnd);
			transform: map-get($configuration, transformEnd);
		}
	}
}


///
/// Mixin centered elements
///
/// @name			centered
///
/// @param  {String}  $pos - The position property specifies the type of positioning method used for an element
/// @param  {String}  $side-1 - CSS Positioning Properties
/// @param  {String}  $side-2 - CSS Positioning Properties
///
/// @see      $object
///
/// @example
///   <selector> {
///     @include centered([absolute | relative | fixed], [left | right], [top | bottom]);
///   }
///
@mixin centered($pos, $side-1, $side-2) {
	position: $pos;
	$side-1: 50%;
	$side-2: 50%;
	transform: translate(-50%, -50%);
}


///
/// Mixin box-shadow
///
/// @name			boxShadow
///
/// @param  {Number | String}  $name - The box-shadow property attaches one or more shadows to an element.
///
/// @see      $object
///
/// @example
///   <selector> {
///     @include boxShadow([1 | 2 | 3 | 4 | 5]);
///   }
///
$boxShadowObj: (
	"1" : "0 2px 2px 0 rgba(0,0,0,0.14), 0 1px 5px 0 rgba(0,0,0,0.12), 0 3px 1px -2px rgba(0,0,0,0.2)",
	"2" : "0 4px 5px 0 rgba(0,0,0,0.14), 0 1px 10px 0 rgba(0,0,0,0.12), 0 2px 4px -1px rgba(0,0,0,0.3)",
	"3" : "0 6px 10px 0 rgba(0,0,0,0.14), 0 1px 18px 0 rgba(0,0,0,0.12), 0 3px 5px -1px rgba(0,0,0,0.3)",
	"4" : "0 8px 10px 1px rgba(0,0,0,0.14), 0 3px 14px 2px rgba(0,0,0,0.12), 0 5px 5px -3px rgba(0,0,0,0.3)",
	"5" : "0 16px 24px 2px rgba(0,0,0,0.14), 0 6px 30px 5px rgba(0,0,0,0.12), 0 8px 10px -5px rgba(0,0,0,0.3)",
) !default;

@mixin boxShadow($name) {
	@if map-has-key($boxShadowObj, $name) {
		box-shadow: #{inspect(map_get($boxShadowObj, $name))};
	} @else {
		@warn "Unfortunately, no value could be retrieved from `#{$boxShadowObj}`. Please make sure it is defined in `$boxShadowObj` map.";
	}
}


///
/// Mixin transition
///
/// @name			transition
///
/// @param  {String}  $rest... - CSS properties that are to be animated.
///
/// @see      $object
///
/// @example
///   <selector> {
///     @include transition([color | opacity | border | etc]);
///   }
///
@mixin transition($rest...) {
	$list: null;

	@each $prop in ($rest) {
		$list: append($list, $prop 0.3s ease-in-out, comma);
	}

	transition: $list;
}


///
/// Mixin media queries.
///
/// @name     respond
///
/// @param    {String}  $media [$text-mobile | $text-tablet | $text-small | $text-medium | $text-large] - Value that identifies one of the options and breakpoint.
///
/// @see      $object
///
/// @example
///   <selector> {
///     @include respond($text-mobile) { @content };
///   }
///   <selector> {
///     @include respond($text-medium) { @content };
///   }
///
$breakpointsMedia: (
	"es"        : "(min-width: 320px)",
	"s"         : "(min-width: 576px)",
	"m"         : "(min-width: 768px)",
	"l"         : "(min-width: 992px)",
	"el"        : "(min-width: 1200px)",
	"w"         : "(min-width: 1600px)",
	"hd"        : "(min-width: 1920)"
) !default;

@mixin respond($name) {
	@if map-has-key($breakpointsMedia, $name) {
		@media screen and #{inspect(map-get($breakpointsMedia, $name))} {
			@content;
		}
	} @else {
		@warn "Unfortunately, no value could be retrieved from `#{$breakpointsMedia}`. Please make sure it is defined in `$breakpointsMedia` map.";
	}
}
